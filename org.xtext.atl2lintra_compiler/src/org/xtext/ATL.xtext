// automatically generated by Xtext
grammar org.xtext.ATL with org.eclipse.xtext.common.Terminals

//import "atl" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate aTL "http://www.xtext.org/atl2lintra_compiler/aTL"

Model:
	unit+=unit*;

unit : module | library | query;

module : 'module' moduleName=ID ';' 'create' oclModel (',' oclModel)* ('refining' | 'from') oclModel (',' oclModel)* ';' refs+=libraryRef* modules+=moduleElement*;

library : 'library' libName=ID ';' refs+=libraryRef* helpers+=helper*;

query : 'query' queryName=ID '=' oclExpression ';' refs+=libraryRef* helpers+=helper*;

libraryRef : 'uses' usesName=ID ';';

moduleElement : helper | rule;

helper : 'helper' oclFeatureDefinition ';';

oclFeatureDefinition : oclContextDefinition? 'def' ':' oclFeature;

oclContextDefinition : 'context' oclType;

oclFeature : operation | attribute;

operation : opName=ID '(' (params+=parameter (',' params+=parameter)*)? ')' ':' oclType '=' oclExpression;

parameter : paramName=ID ':' oclType;

attribute : attName=ID ':' oclType '=' oclExpression;

rule : calledRule | matchedRule;

matchedRule : lazyMatchedRule | matchedRule_abstractContents;

lazyMatchedRule : 'unique'? 'lazy' 'abstract'? 'refining'? 'rule' lazyRuleName=ID ('extends' extRuleName=ID)? '{' inPattern=inPattern ('using' '{' varDecl+=ruleVariableDeclaration* '}')? outPattern=outPattern? actionBlock? '}';

ruleVariableDeclaration : varDeclName=ID ':' oclType '=' oclExpression ';';

calledRule : 'entrypoint'? 'endpoint'? 'rule' ruleName=ID '(' (params+=parameter (',' params+=parameter)*)? ')' '{' ('using' '{' varDecl+=ruleVariableDeclaration* '}')? outPattern=outPattern? actionBlock? '}';

inPattern : 'from' inPatternElement (',' inPatternElems+=inPatternElement)* ('(' oclExpression ')')?;

inPatternElement : simpleInPatternElement;

simpleInPatternElement : simpleInPatternName=ID ':' oclType ('in' inName+=ID (',' inName+=ID)*)?;

outPattern : 'to' outPatternElement (',' outPatternElems+=outPatternElement)*;

outPatternElement : simpleOutPatternElement | forEachOutPatternElement;

simpleOutPatternElement : simpleOutPatternName=ID ':' oclType ('in' inName+=ID)? ('mapsTo' inName+=ID)? ('(' (binding (',' binding)*)? ')')?;

forEachOutPatternElement : ID ':' 'distinct' oclType 'foreach' '(' iterator 'in' oclExpression ')' ('mapsTo' ID)? ('(' (binding (',' binding)*)? ')')?;

binding : ID '<-' oclExpression;

actionBlock : 'do' '{' statement* '}';

statement : ifStat | expressionStat | bindingStat | forStat;

bindingStat : oclExpression '<-' oclExpression ';';

expressionStat : oclExpression ';';

ifStat : 'if' '(' oclExpression ')' (statement | '{' statement* '}') ('else' (statement | '{' statement* '}'))?;

forStat : 'for' '(' iterator 'in' oclExpression ')' '{' statement* '}';

oclModel : ID ':' ID;

oclModelElement : ID '!' ID;

oclExpression : priority_5 | letExp;

iteratorExp : ID '(' iterator (',' iterator)* '|' oclExpression ')';

iterateExp : 'iterate' '(' iterator (',' iterator)* ';' variableDeclaration '|' oclExpression ')';

collectionOperationCallExp : ID '(' (oclExpression (',' oclExpression)*)? ')';

operationCallExp : ID '(' (oclExpression (',' oclExpression)*)? ')';

navigationOrAttributeCallExp : ID;

iterator : ID;

oclUndefinedExp : 'OclUndefined';

primitiveExp : numericExp | booleanExp | stringExp;

numericExp : integerExp | realExp;

booleanExp : 'true' | 'false';

integerExp : INT;

realExp : INT '.' INT;

stringExp : STRING;

ifExp : 'if' oclExpression 'then' oclExpression 'else' oclExpression 'endif';

variableExp : ID;

superExp : 'super';

letExp : 'let' variableDeclaration 'in' oclExpression;

variableDeclaration : ID ':' oclType '=' oclExpression;

enumLiteralExp : '#' ID;

collectionExp : bagExp | setExp | orderedSetExp | sequenceExp;

bagExp : 'Bag' '{' (oclExpression (',' oclExpression)*)? '}';

setExp : 'Set' '{' (oclExpression (',' oclExpression)*)? '}';

orderedSetExp : 'OrderedSet' '{' (oclExpression (',' oclExpression)*)? '}';

sequenceExp : 'Sequence' '{' (oclExpression (',' oclExpression)*)? '}';

mapExp : 'Map' '{' (mapElement (',' mapElement)*)? '}';

mapElement : '(' oclExpression ',' oclExpression ')';

tupleExp : 'Tuple' '{' (tuplePart (',' tuplePart)*)? '}';

tuplePart : ID (':' oclType)? '=' oclExpression;

oclType : oclModelElement | oclAnyType | tupleType | mapType | primitive | collectionType | oclType_abstractContents;

oclAnyType : oclAnyType_abstractContents;

tupleType : 'TupleType' '(' (tupleTypeAttribute (',' tupleTypeAttribute)*)? ')';

tupleTypeAttribute : ID ':' oclType;

mapType : 'Map' '(' oclType ',' oclType ')';

primitive : numericType | booleanType | stringType;

numericType : integerType | realType;

integerType : 'Integer';

realType : 'Real';

booleanType : 'Boolean';

stringType : 'String';

collectionType : bagType | setType | orderedSetType | sequenceType | collectionType_abstractContents;

bagType : 'Bag' '(' oclType ')';

setType : 'Set' '(' oclType ')';

orderedSetType : 'OrderedSet' '(' oclType ')';

sequenceType : 'Sequence' '(' oclType ')';

priority_0 : primary_oclExpression ('.' (operationCallExp | navigationOrAttributeCallExp) | '->' (iteratorExp | iterateExp | collectionOperationCallExp))*;

priority_1 : 'not' priority_0 | '-' priority_0 | priority_0;

priority_2 : priority_1 ('*' priority_1 | '/' priority_1 | 'div' priority_1 | 'mod' priority_1)*;

priority_3 : priority_2 ('+' priority_2 | '-' priority_2)*;

priority_4 : priority_3 ('=' priority_3 | '>' priority_3 | '<' priority_3 | '>=' priority_3 | '<=' priority_3 | '<>' priority_3)*;

priority_5 : priority_4 ('and' priority_4 | 'or' priority_4 | 'xor' priority_4 | 'implies' priority_4)*;

matchedRule_abstractContents : 'nodefault'? 'abstract'? 'refining'? 'rule' ID ('extends' ID)? '{' inPattern ('using' '{' varDecl+=ruleVariableDeclaration* '}')? outPattern+=outPattern? actionBlock? '}';

oclType_abstractContents : 'OclType';

oclAnyType_abstractContents : 'OclAny';

collectionType_abstractContents : 'Collection' '(' oclType ')';

primary_oclExpression : variableExp | oclUndefinedExp | primitiveExp | ifExp | superExp | enumLiteralExp | collectionExp | mapExp | tupleExp | oclType | '(' oclExpression ')';

//ActionBlock returns ActionBlock:
//	{ActionBlock}
//	'ActionBlock'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
//	'}';
//
//Statement returns Statement:
//	ExpressionStat | BindingStat | IfStat | ForStat;
//
//OclExpression returns OclExpression:
//	VariableExp | SuperExp | StringExp | BooleanExp | RealExp | IntegerExp | BagExp | OrderedSetExp | SequenceExp | SetExp | TupleExp | MapExp | EnumLiteralExp | OclUndefinedExp | NavigationOrAttributeCallExp | OperationCallExp_Impl | OperatorCallExp | CollectionOperationCallExp | IterateExp | IteratorExp | LetExp | IfExp | CollectionType_Impl | OclType_Impl | StringType | BooleanType | IntegerType | RealType | BagType | OrderedSetType | SequenceType | SetType | OclAnyType | TupleType | OclModelElement | MapType;
//
//
//OclType returns OclType:
//	OclType_Impl | CollectionType_Impl | StringType | BooleanType | IntegerType | RealType | BagType | OrderedSetType | SequenceType | SetType | OclAnyType | TupleType | OclModelElement | MapType;
//
//VariableDeclaration returns VariableDeclaration:
//	VariableDeclaration_Impl | SimpleInPatternElement | SimpleOutPatternElement | ForEachOutPatternElement | RuleVariableDeclaration | TuplePart | Iterator | Parameter;
//
//OutPatternElement returns OutPatternElement:
//	SimpleOutPatternElement | ForEachOutPatternElement;
//
//InPatternElement returns InPatternElement:
//	SimpleInPatternElement;
//
//
//
//String0 returns String:
//	'String' /* TODO: implement this rule and an appropriate IValueConverter */;
//
//ExpressionStat returns ExpressionStat:
//	'ExpressionStat'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'expression' expression=OclExpression
//	'}';
//
//BindingStat returns BindingStat:
//	'BindingStat'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'propertyName' propertyName=String0
//		'isAssignment' isAssignment=Boolean
//		'source' source=OclExpression
//		'value' value=OclExpression
//	'}';
//
//IfStat returns IfStat:
//	'IfStat'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'condition' condition=OclExpression
//		('thenStatements' '{' thenStatements+=Statement ( "," thenStatements+=Statement)* '}' )?
//		('elseStatements' '{' elseStatements+=Statement ( "," elseStatements+=Statement)* '}' )?
//	'}';
//
//ForStat returns ForStat:
//	'ForStat'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'iterator' iterator=Iterator
//		'collection' collection=OclExpression
//		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
//	'}';
//
//OclType_Impl returns OclType:
//	'OclType'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		('type' type=OclType)?
//	'}';
//
//VariableExp returns VariableExp:
//	'VariableExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'referredVariable' referredVariable=[VariableDeclaration|EString]
//		('type' type=OclType)?
//	'}';
//
//SuperExp returns SuperExp:
//	{SuperExp}
//	'SuperExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('type' type=OclType)?
//	'}';
//
//StringExp returns StringExp:
//	'StringExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'stringSymbol' stringSymbol=String0
//		('type' type=OclType)?
//	'}';
//
//BooleanExp returns BooleanExp:
//	'BooleanExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'booleanSymbol' booleanSymbol=Boolean
//		('type' type=OclType)?
//	'}';
//
//RealExp returns RealExp:
//	'RealExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'realSymbol' realSymbol=Double
//		('type' type=OclType)?
//	'}';
//
//IntegerExp returns IntegerExp:
//	'IntegerExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'integerSymbol' integerSymbol=Integer
//		('type' type=OclType)?
//	'}';
//
//BagExp returns BagExp:
//	{BagExp}
//	'BagExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('type' type=OclType)?
//		('elements' '{' elements+=OclExpression ( "," elements+=OclExpression)* '}' )?
//	'}';
//
//OrderedSetExp returns OrderedSetExp:
//	{OrderedSetExp}
//	'OrderedSetExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('type' type=OclType)?
//		('elements' '{' elements+=OclExpression ( "," elements+=OclExpression)* '}' )?
//	'}';
//
//SequenceExp returns SequenceExp:
//	{SequenceExp}
//	'SequenceExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('type' type=OclType)?
//		('elements' '{' elements+=OclExpression ( "," elements+=OclExpression)* '}' )?
//	'}';
//
//SetExp returns SetExp:
//	{SetExp}
//	'SetExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('type' type=OclType)?
//		('elements' '{' elements+=OclExpression ( "," elements+=OclExpression)* '}' )?
//	'}';
//
//TupleExp returns TupleExp:
//	{TupleExp}
//	'TupleExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('type' type=OclType)?
//		('tuplePart' '{' tuplePart+=TuplePart ( "," tuplePart+=TuplePart)* '}' )?
//	'}';
//
//MapExp returns MapExp:
//	{MapExp}
//	'MapExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('type' type=OclType)?
//		('elements' '{' elements+=MapElement ( "," elements+=MapElement)* '}' )?
//	'}';
//
//EnumLiteralExp returns EnumLiteralExp:
//	'EnumLiteralExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		('type' type=OclType)?
//	'}';
//
//OclUndefinedExp returns OclUndefinedExp:
//	{OclUndefinedExp}
//	'OclUndefinedExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('type' type=OclType)?
//	'}';
//
//NavigationOrAttributeCallExp returns NavigationOrAttributeCallExp:
//	'NavigationOrAttributeCallExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		('type' type=OclType)?
//		'source' source=OclExpression
//	'}';
//
//OperationCallExp_Impl returns OperationCallExp:
//	'OperationCallExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'operationName' operationName=String0
//		('type' type=OclType)?
//		'source' source=OclExpression
//		('arguments' '{' arguments+=OclExpression ( "," arguments+=OclExpression)* '}' )?
//	'}';
//
//OperatorCallExp returns OperatorCallExp:
//	'OperatorCallExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'operationName' operationName=String0
//		('type' type=OclType)?
//		'source' source=OclExpression
//		('arguments' '{' arguments+=OclExpression ( "," arguments+=OclExpression)* '}' )?
//	'}';
//
//CollectionOperationCallExp returns CollectionOperationCallExp:
//	'CollectionOperationCallExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'operationName' operationName=String0
//		('type' type=OclType)?
//		'source' source=OclExpression
//		('arguments' '{' arguments+=OclExpression ( "," arguments+=OclExpression)* '}' )?
//	'}';
//
//IterateExp returns IterateExp:
//	'IterateExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('type' type=OclType)?
//		'source' source=OclExpression
//		'body' body=OclExpression
//		'iterators' '{' iterators+=Iterator ( "," iterators+=Iterator)* '}' 
//		'result' result=VariableDeclaration
//	'}';
//
//IteratorExp returns IteratorExp:
//	'IteratorExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		('type' type=OclType)?
//		'source' source=OclExpression
//		'body' body=OclExpression
//		'iterators' '{' iterators+=Iterator ( "," iterators+=Iterator)* '}' 
//	'}';
//
//LetExp returns LetExp:
//	'LetExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('type' type=OclType)?
//		'variable' variable=VariableDeclaration
//		'in_' in_=OclExpression
//	'}';
//
//IfExp returns IfExp:
//	'IfExp'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('type' type=OclType)?
//		'thenExpression' thenExpression=OclExpression
//		'condition' condition=OclExpression
//		'elseExpression' elseExpression=OclExpression
//	'}';
//
//CollectionType_Impl returns CollectionType:
//	'CollectionType'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		('type' type=OclType)?
//		'elementType' elementType=OclType
//	'}';
//
//StringType returns StringType:
//	'StringType'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		('type' type=OclType)?
//	'}';
//
//BooleanType returns BooleanType:
//	'BooleanType'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		('type' type=OclType)?
//	'}';
//
//IntegerType returns IntegerType:
//	'IntegerType'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		('type' type=OclType)?
//	'}';
//
//RealType returns RealType:
//	'RealType'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		('type' type=OclType)?
//	'}';
//
//BagType returns BagType:
//	'BagType'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		('type' type=OclType)?
//		'elementType' elementType=OclType
//	'}';
//
//OrderedSetType returns OrderedSetType:
//	'OrderedSetType'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		('type' type=OclType)?
//		'elementType' elementType=OclType
//	'}';
//
//SequenceType returns SequenceType:
//	'SequenceType'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		('type' type=OclType)?
//		'elementType' elementType=OclType
//	'}';
//
//SetType returns SetType:
//	'SetType'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		('type' type=OclType)?
//		'elementType' elementType=OclType
//	'}';
//
//OclAnyType returns OclAnyType:
//	'OclAnyType'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		('type' type=OclType)?
//	'}';
//
//TupleType returns TupleType:
//	'TupleType'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		('type' type=OclType)?
//		('attributes' '{' attributes+=TupleTypeAttribute ( "," attributes+=TupleTypeAttribute)* '}' )?
//	'}';
//
//OclModelElement returns OclModelElement:
//	'OclModelElement'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		'model' model=[OclModel|EString]
//		('type' type=OclType)?
//	'}';
//
//MapType returns MapType:
//	'MapType'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		('type' type=OclType)?
//		'valueType' valueType=OclType
//		'keyType' keyType=OclType
//	'}';
//
//VariableDeclaration_Impl returns VariableDeclaration:
//	'VariableDeclaration'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('id' id=String0)?
//		'varName' varName=String0
//		('variableExp' '(' variableExp+=[VariableExp|EString] ( "," variableExp+=[VariableExp|EString])* ')' )?
//		('type' type=OclType)?
//		('initExpression' initExpression=OclExpression)?
//	'}';
//
//SimpleInPatternElement returns SimpleInPatternElement:
//	'SimpleInPatternElement'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('id' id=String0)?
//		'varName' varName=String0
//		('variableExp' '(' variableExp+=[VariableExp|EString] ( "," variableExp+=[VariableExp|EString])* ')' )?
//		'mapsTo' mapsTo=[OutPatternElement|EString]
//		('models' '(' models+=[OclModel|EString] ( "," models+=[OclModel|EString])* ')' )?
//		('type' type=OclType)?
//		('initExpression' initExpression=OclExpression)?
//	'}';
//
//SimpleOutPatternElement returns SimpleOutPatternElement:
//	'SimpleOutPatternElement'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('id' id=String0)?
//		'varName' varName=String0
//		('variableExp' '(' variableExp+=[VariableExp|EString] ( "," variableExp+=[VariableExp|EString])* ')' )?
//		('sourceElement' sourceElement=[InPatternElement|EString])?
//		('model' model=[OclModel|EString])?
//		('type' type=OclType)?
//		('initExpression' initExpression=OclExpression)?
//		('bindings' '{' bindings+=Binding ( "," bindings+=Binding)* '}' )?
//		('reverseBindings' '{' reverseBindings+=OclExpression ( "," reverseBindings+=OclExpression)* '}' )?
//	'}';
//
//ForEachOutPatternElement returns ForEachOutPatternElement:
//	'ForEachOutPatternElement'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('id' id=String0)?
//		'varName' varName=String0
//		('variableExp' '(' variableExp+=[VariableExp|EString] ( "," variableExp+=[VariableExp|EString])* ')' )?
//		('sourceElement' sourceElement=[InPatternElement|EString])?
//		('model' model=[OclModel|EString])?
//		('type' type=OclType)?
//		('initExpression' initExpression=OclExpression)?
//		('bindings' '{' bindings+=Binding ( "," bindings+=Binding)* '}' )?
//		'collection' collection=OclExpression
//		'iterator' iterator=Iterator
//	'}';
//
//RuleVariableDeclaration returns RuleVariableDeclaration:
//	'RuleVariableDeclaration'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('id' id=String0)?
//		'varName' varName=String0
//		('variableExp' '(' variableExp+=[VariableExp|EString] ( "," variableExp+=[VariableExp|EString])* ')' )?
//		('type' type=OclType)?
//		('initExpression' initExpression=OclExpression)?
//	'}';
//
//TuplePart returns TuplePart:
//	'TuplePart'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('id' id=String0)?
//		'varName' varName=String0
//		('variableExp' '(' variableExp+=[VariableExp|EString] ( "," variableExp+=[VariableExp|EString])* ')' )?
//		('type' type=OclType)?
//		('initExpression' initExpression=OclExpression)?
//	'}';
//
//Iterator returns Iterator:
//	'Iterator'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('id' id=String0)?
//		'varName' varName=String0
//		('variableExp' '(' variableExp+=[VariableExp|EString] ( "," variableExp+=[VariableExp|EString])* ')' )?
//		('type' type=OclType)?
//		('initExpression' initExpression=OclExpression)?
//	'}';
//
//Parameter returns Parameter:
//	'Parameter'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		('id' id=String0)?
//		'varName' varName=String0
//		('variableExp' '(' variableExp+=[VariableExp|EString] ( "," variableExp+=[VariableExp|EString])* ')' )?
//		('type' type=OclType)?
//		('initExpression' initExpression=OclExpression)?
//	'}';
//
//OclModel returns OclModel:
//	'OclModel'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		'metamodel' metamodel=[OclModel|EString]
//		('elements' '(' elements+=[OclModelElement|EString] ( "," elements+=[OclModelElement|EString])* ')' )?
//		('model' '(' model+=[OclModel|EString] ( "," model+=[OclModel|EString])* ')' )?
//	'}';
//
//Binding returns Binding:
//	'Binding'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'propertyName' propertyName=String0
//		'isAssignment' isAssignment=Boolean
//		'value' value=OclExpression
//	'}';
//
//Boolean returns Boolean:
//	'Boolean' /* TODO: implement this rule and an appropriate IValueConverter */;
//
//Double returns Double:
//	'Double' /* TODO: implement this rule and an appropriate IValueConverter */;
//
//Integer returns Integer:
//	'Integer' /* TODO: implement this rule and an appropriate IValueConverter */;
//
//MapElement returns MapElement:
//	'MapElement'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'key' key=OclExpression
//		'value' value=OclExpression
//	'}';
//
//TupleTypeAttribute returns TupleTypeAttribute:
//	'TupleTypeAttribute'
//	'{'
//		('location' location=String0)?
//		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
//		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
//		'name' name=String0
//		'type' type=OclType
//	'}';
